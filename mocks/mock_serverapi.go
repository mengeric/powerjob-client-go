// Code generated by MockGen. DO NOT EDIT.
// Source: powerjob-client-go/client (interfaces: ServerAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
    context "context"
    gomock "go.uber.org/mock/gomock"
    reflect "reflect"
    client "powerjob-client-go/client"
)

// MockServerAPI is a mock of ServerAPI interface.
type MockServerAPI struct {
    ctrl     *gomock.Controller
    recorder *MockServerAPIMockRecorder
}

// MockServerAPIMockRecorder is the mock recorder for MockServerAPI.
type MockServerAPIMockRecorder struct {
    mock *MockServerAPI
}

// NewMockServerAPI creates a new mock instance.
func NewMockServerAPI(ctrl *gomock.Controller) *MockServerAPI {
    mock := &MockServerAPI{ctrl: ctrl}
    mock.recorder = &MockServerAPIMockRecorder{mock}
    return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerAPI) EXPECT() *MockServerAPIMockRecorder { return m.recorder }

// Acquire mocks base method.
func (m *MockServerAPI) Acquire(arg0 context.Context, arg1 string, arg2 int64, arg3, arg4 string) (string, error) {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "Acquire", arg0, arg1, arg2, arg3, arg4)
    ret0, _ := ret[0].(string)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockServerAPIMockRecorder) Acquire(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockServerAPI)(nil).Acquire), arg0, arg1, arg2, arg3, arg4)
}

// AssertApp mocks base method.
func (m *MockServerAPI) AssertApp(arg0 context.Context, arg1, arg2 string) (int64, error) {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "AssertApp", arg0, arg1, arg2)
    ret0, _ := ret[0].(int64)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// AssertApp indicates an expected call of AssertApp.
func (mr *MockServerAPIMockRecorder) AssertApp(arg0, arg1, arg2 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssertApp", reflect.TypeOf((*MockServerAPI)(nil).AssertApp), arg0, arg1, arg2)
}

// Heartbeat mocks base method.
func (m *MockServerAPI) Heartbeat(arg0 context.Context, arg1 string, arg2 client.WorkerHeartbeat) error {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "Heartbeat", arg0, arg1, arg2)
    ret0, _ := ret[0].(error)
    return ret0
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockServerAPIMockRecorder) Heartbeat(arg0, arg1, arg2 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockServerAPI)(nil).Heartbeat), arg0, arg1, arg2)
}

// ReportInstanceStatus mocks base method.
func (m *MockServerAPI) ReportInstanceStatus(arg0 context.Context, arg1 string, arg2 client.TaskTrackerReportInstanceStatusReq) error {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "ReportInstanceStatus", arg0, arg1, arg2)
    ret0, _ := ret[0].(error)
    return ret0
}

// ReportInstanceStatus indicates an expected call of ReportInstanceStatus.
func (mr *MockServerAPIMockRecorder) ReportInstanceStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportInstanceStatus", reflect.TypeOf((*MockServerAPI)(nil).ReportInstanceStatus), arg0, arg1, arg2)
}

// ReportLog mocks base method.
func (m *MockServerAPI) ReportLog(arg0 context.Context, arg1 string, arg2 client.WorkerLogReportReq) error {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "ReportLog", arg0, arg1, arg2)
    ret0, _ := ret[0].(error)
    return ret0
}

// ReportLog indicates an expected call of ReportLog.
func (mr *MockServerAPIMockRecorder) ReportLog(arg0, arg1, arg2 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportLog", reflect.TypeOf((*MockServerAPI)(nil).ReportLog), arg0, arg1, arg2)
}

